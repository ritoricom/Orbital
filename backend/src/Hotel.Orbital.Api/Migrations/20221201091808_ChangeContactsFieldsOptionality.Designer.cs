// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221201091808_ChangeContactsFieldsOptionality")]
    partial class ChangeContactsFieldsOptionality
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Abstractions.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("Entities.ChangeLog", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<long>("DateOfChange")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeLog");
                });

            modelBuilder.Entity("Entities.Contacts", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Addresses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VkLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("HotelId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Entities.Hotel", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<int>("City")
                        .HasColumnType("integer");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Entities.HotelGallery", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.HasIndex("HotelId")
                        .IsUnique();

                    b.ToTable("HotelGalleries");
                });

            modelBuilder.Entity("Entities.Image", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid?>("HotelGalleryId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ImageBytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid?>("ImageHolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LeisureGalleryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NewsGalleryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomGalleryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialOfferGalleryId")
                        .HasColumnType("uuid");

                    b.HasIndex("HotelGalleryId");

                    b.HasIndex("ImageHolderId");

                    b.HasIndex("LeisureGalleryId");

                    b.HasIndex("NewsGalleryId");

                    b.HasIndex("RoomGalleryId");

                    b.HasIndex("SpecialOfferGalleryId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Entities.Leisure", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeisureDays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Leisures");
                });

            modelBuilder.Entity("Entities.LeisureCover", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeisureId")
                        .HasColumnType("uuid");

                    b.HasIndex("ImageId");

                    b.HasIndex("LeisureId")
                        .IsUnique();

                    b.ToTable("LeisureCovers");
                });

            modelBuilder.Entity("Entities.LeisureGallery", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("LeisureId")
                        .HasColumnType("uuid");

                    b.HasIndex("LeisureId")
                        .IsUnique();

                    b.ToTable("LeisureGalleries");
                });

            modelBuilder.Entity("Entities.News", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("HotelId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Entities.NewsCover", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uuid");

                    b.HasIndex("ImageId");

                    b.HasIndex("NewsId")
                        .IsUnique();

                    b.ToTable("NewsCovers");
                });

            modelBuilder.Entity("Entities.NewsGallery", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uuid");

                    b.HasIndex("NewsId")
                        .IsUnique();

                    b.ToTable("NewsGalleries");
                });

            modelBuilder.Entity("Entities.Newsletter", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.HasIndex("HotelId");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Entities.Review", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Grade")
                        .HasColumnType("smallint");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.HasIndex("HotelId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Peculiarities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Entities.RoomCover", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("RoomCovers");
                });

            modelBuilder.Entity("Entities.RoomGallery", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("RoomGalleries");
                });

            modelBuilder.Entity("Entities.SpecialOffer", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("SpecialOffers");
                });

            modelBuilder.Entity("Entities.SpecialOfferCover", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialOfferId")
                        .HasColumnType("uuid");

                    b.HasIndex("ImageId");

                    b.HasIndex("SpecialOfferId")
                        .IsUnique();

                    b.ToTable("SpecialOfferCovers");
                });

            modelBuilder.Entity("Entities.SpecialOfferGallery", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<Guid>("SpecialOfferId")
                        .HasColumnType("uuid");

                    b.HasIndex("SpecialOfferId")
                        .IsUnique();

                    b.ToTable("SpecialOfferGalleries");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasBaseType("Entities.Abstractions.Entity");

                    b.Property<int?>("City")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.ChangeLog", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.ChangeLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Contacts", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithOne("Contacts")
                        .HasForeignKey("Entities.Contacts", "HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Contacts", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.Hotel", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Hotel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.HotelGallery", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithOne("HotelGallery")
                        .HasForeignKey("Entities.HotelGallery", "HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.HotelGallery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.Image", b =>
                {
                    b.HasOne("Entities.HotelGallery", null)
                        .WithMany("Images")
                        .HasForeignKey("HotelGalleryId");

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Abstractions.Entity", "ImageHolder")
                        .WithMany()
                        .HasForeignKey("ImageHolderId");

                    b.HasOne("Entities.LeisureGallery", null)
                        .WithMany("Images")
                        .HasForeignKey("LeisureGalleryId");

                    b.HasOne("Entities.NewsGallery", null)
                        .WithMany("Images")
                        .HasForeignKey("NewsGalleryId");

                    b.HasOne("Entities.RoomGallery", null)
                        .WithMany("Images")
                        .HasForeignKey("RoomGalleryId");

                    b.HasOne("Entities.SpecialOfferGallery", null)
                        .WithMany("Images")
                        .HasForeignKey("SpecialOfferGalleryId");

                    b.Navigation("ImageHolder");
                });

            modelBuilder.Entity("Entities.Leisure", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Leisure", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.LeisureCover", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.LeisureCover", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Leisure", "Leisure")
                        .WithOne("Cover")
                        .HasForeignKey("Entities.LeisureCover", "LeisureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Leisure");
                });

            modelBuilder.Entity("Entities.LeisureGallery", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.LeisureGallery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Leisure", "Leisure")
                        .WithOne("Gallery")
                        .HasForeignKey("Entities.LeisureGallery", "LeisureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leisure");
                });

            modelBuilder.Entity("Entities.News", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithMany("News")
                        .HasForeignKey("HotelId");

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.News", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.NewsCover", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.NewsCover", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.News", "News")
                        .WithOne("Cover")
                        .HasForeignKey("Entities.NewsCover", "NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Entities.NewsGallery", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.NewsGallery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.News", "News")
                        .WithOne("NewsGallery")
                        .HasForeignKey("Entities.NewsGallery", "NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Entities.Newsletter", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithMany("Newsletters")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Newsletter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.Review", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Review", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.HasOne("Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.Room", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Entities.RoomCover", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.RoomCover", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Room", "Room")
                        .WithOne("Cover")
                        .HasForeignKey("Entities.RoomCover", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.RoomGallery", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.RoomGallery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Room", "Room")
                        .WithOne("RoomGallery")
                        .HasForeignKey("Entities.RoomGallery", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.SpecialOffer", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.SpecialOffer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.SpecialOfferCover", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.SpecialOfferCover", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.SpecialOffer", "SpecialOffer")
                        .WithOne("Cover")
                        .HasForeignKey("Entities.SpecialOfferCover", "SpecialOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("Entities.SpecialOfferGallery", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.SpecialOfferGallery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.SpecialOffer", "SpecialOffer")
                        .WithOne("Gallery")
                        .HasForeignKey("Entities.SpecialOfferGallery", "SpecialOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Abstractions.Entity", null)
                        .WithOne()
                        .HasForeignKey("Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Hotel", b =>
                {
                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("HotelGallery")
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Newsletters");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Entities.HotelGallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Entities.Leisure", b =>
                {
                    b.Navigation("Cover")
                        .IsRequired();

                    b.Navigation("Gallery")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.LeisureGallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Entities.News", b =>
                {
                    b.Navigation("Cover")
                        .IsRequired();

                    b.Navigation("NewsGallery")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.NewsGallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Navigation("Cover")
                        .IsRequired();

                    b.Navigation("RoomGallery")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.RoomGallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Entities.SpecialOffer", b =>
                {
                    b.Navigation("Cover")
                        .IsRequired();

                    b.Navigation("Gallery")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.SpecialOfferGallery", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
